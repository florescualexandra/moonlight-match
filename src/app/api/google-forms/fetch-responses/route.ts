import { NextRequest, NextResponse } from 'next/server';
import { fetchFormResponses, getSpreadsheetInfo } from '../../../../lib/google-sheets';
import { prisma } from '../../../../lib/prisma';

export async function POST(request: NextRequest) {
  try {
    const { spreadsheetId, eventId } = await request.json();

    if (!spreadsheetId) {
      return NextResponse.json({ error: 'Spreadsheet ID is required' }, { status: 400 });
    }

    // Get spreadsheet info to verify access
    const spreadsheetInfo = await getSpreadsheetInfo(spreadsheetId);
    console.log('Accessing spreadsheet:', spreadsheetInfo.title);

    // Fetch form responses
    const formResponses = await fetchFormResponses(spreadsheetId);
    console.log(`Found ${formResponses.length} form responses`);

    // Process each response
    const processedUsers = [];
    const errors = [];

    for (const response of formResponses) {
      try {
        if (!response.email) {
          errors.push(`No email found in response: ${JSON.stringify(response)}`);
          continue;
        }

        // Find or create user
        const user = await prisma.user.upsert({
          where: { email: response.email },
          update: {
            formResponse: response,
            name: response["What is your name?"] || response.name || "",
            hasCompletedForm: true,
            // Add more mappings as needed, e.g.:
            // age: response["Age"],
            // gender: response["Gender"],
            // ...
          },
          create: {
            email: response.email,
            password: 'autogenerated',
            formResponse: response,
            name: response["What is your name?"] || response.name || "",
            hasCompletedForm: true,
            // Add more mappings as needed, e.g.:
            // age: response["Age"],
            // gender: response["Gender"],
            // ...
          },
        });

        // If eventId is provided, create a ticket to link user to event
        if (eventId) {
          // Check if ticket already exists
          const existingTicket = await prisma.ticket.findFirst({
            where: {
              userId: user.id,
              eventId: eventId,
            },
          });

          if (!existingTicket) {
            await prisma.ticket.create({
              data: {
                userId: user.id,
                eventId: eventId,
              },
            });
          }
        }

        processedUsers.push({
          id: user.id,
          email: user.email,
          name: response["What is your name?"] || response["What is your name?"] || '',
          formResponse: response,
        });

      } catch (error) {
        console.error(`Error processing response for ${response.email}:`, error);
        errors.push(`Error processing ${response.email}: ${error}`);
      }
    }

    return NextResponse.json({
      success: true,
      message: `Processed ${processedUsers.length} users successfully`,
      processedUsers,
      errors,
      totalResponses: formResponses.length,
    });

  } catch (error) {
    console.error('Error fetching and processing form responses:', error);
    return NextResponse.json({ 
      error: 'Failed to fetch and process form responses',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const spreadsheetId = searchParams.get('spreadsheetId');

    if (!spreadsheetId) {
      return NextResponse.json({ error: 'Spreadsheet ID is required' }, { status: 400 });
    }

    // Get spreadsheet info
    const spreadsheetInfo = await getSpreadsheetInfo(spreadsheetId);

    // Fetch form responses (just for preview, don't process)
    const formResponses = await fetchFormResponses(spreadsheetId);

    return NextResponse.json({
      spreadsheetInfo,
      formResponses: formResponses.slice(0, 5), // Show first 5 responses as preview
      totalResponses: formResponses.length,
    });

  } catch (error) {
    console.error('Error fetching spreadsheet info:', error);
    return NextResponse.json({ 
      error: 'Failed to fetch spreadsheet info',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 