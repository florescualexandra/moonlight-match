import { NextRequest, NextResponse } from 'next/server';
import { prisma } from "../../../../lib/prisma";

export async function POST(request: Request) {
  try {
    const formData = await request.json();
    
    // Extract email from form response
    const email = formData.email;
    if (!email) {
      return NextResponse.json({ error: 'Email is required' }, { status: 400 });
    }

    // Check if user already exists and has completed the form
    const existingUser = await prisma.user.findUnique({
      where: { email },
      select: { id: true, hasCompletedForm: true }
    });

    if (existingUser && existingUser.hasCompletedForm) {
      return NextResponse.json({ 
        error: 'Form already completed',
        message: 'You have already completed this form. You cannot submit it again.'
      }, { status: 409 });
    }

    // Find or create user
    const user = await prisma.user.upsert({
      where: { email },
      update: {
        formResponse: formData,
        name: formData["What is your name?"] || formData.name || "",
        hasCompletedForm: true, // Mark as completed
        // Add more mappings as needed, e.g.:
        // age: formData["Age"],
        // gender: formData["Gender"],
        // ...
      },
      create: {
        email,
        password: 'autogenerated',
        formResponse: formData,
        name: formData["What is your name?"] || formData.name || "",
        hasCompletedForm: true, // Mark as completed
        // Add more mappings as needed, e.g.:
        // age: formData["Age"],
        // gender: formData["Gender"],
        // ...
      }
    });

    // If eventId is present, create a ticket to link user to event (if not already present)
    if (formData.eventId) {
      const existingTicket = await prisma.ticket.findFirst({
        where: { userId: user.id, eventId: formData.eventId },
      });
      if (!existingTicket) {
        await prisma.ticket.create({
          data: {
            userId: user.id,
            eventId: formData.eventId,
          },
        });
      }
    }

    return NextResponse.json({ 
      user,
      message: 'Form submitted successfully'
    });
  } catch (error) {
    console.error('Error processing form submission:', error);
    return NextResponse.json({ 
      error: 'Failed to process form submission' 
    }, { status: 500 });
  }
} 